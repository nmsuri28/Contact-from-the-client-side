{"version":3,"sources":["services/EmailJSApi.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["EmailJSApi","key","process","REACT_APP_USER_ID","userID","Contact","handleEmailChange","event","preventDefault","setState","email","target","value","nameChange","name","messageChange","message","handleSubmit","state","template_params","emailjs","send","then","response","console","log","status","text","err","submit","reset","bind","this","className","id","htmlFor","onChange","ref","type","placeholder","rows","onClick","Component","App","href","role","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAEMA,EAAY,CACdC,IAAKC,gEAAYC,mBCEfC,EDCSJ,ECDWC,IAGLI,E,YACrB,aAAe,IAAD,8BACV,+CAYAC,kBAAkB,SAACC,GACfA,EAAMC,iBACN,EAAKC,SAAS,CAACC,MAAOH,EAAMI,OAAOC,SAf7B,EAkBTC,WAAW,SAACN,GACTA,EAAMC,iBACN,EAAKC,SAAS,CAACK,KAAMP,EAAMI,OAAOC,SApB5B,EAuBTG,cAAc,SAACR,GACZA,EAAMC,iBACN,EAAKC,SAAS,CAACO,QAAST,EAAMI,OAAOC,SAzB/B,EA6BTK,aAAa,SAACV,GACXA,EAAMC,iBAQN,IAAMM,EAAO,EAAKI,MAAMJ,KAMrBK,EAAkB,CACrB,MANc,EAAKD,MAAMR,MAOzB,UAAaI,EACb,QAAW,kBACX,aARa,EAAKI,MAAMF,SAW5BI,IAAQC,KAAK,kBAxDG,qBAwD4BF,EAC1Cf,GAEGkB,MAAK,SAACC,GACJC,QAAQC,IAAI,WAAYF,EAASG,OAAQH,EAASI,SAClD,SAACC,GACDJ,QAAQC,IAAI,YAAaG,MAE5B,EAAKnB,SAAS,CACVoB,QAAO,IAGX,EAAKC,SA7DT,EAAKb,aAAe,EAAKA,aAAac,KAAlB,gBACpB,EAAKb,MAAM,CACPJ,KAAM,GACNJ,MAAM,GACNM,QAAQ,GACRa,QAAQ,GAGZ,EAAKvB,kBAAkB,EAAKA,kBAAkByB,KAAvB,gBAVb,E,qEAmENC,KAAKvB,SAAS,CACVK,KAAM,GACNJ,MAAM,GACNM,QAAQ,O,+BAKZ,IACIO,EAkCJ,OAhCIA,EAHeS,KAAKd,MAAMW,OAI1B,yBAAKI,UAAU,YACX,yEACA,qIAMJ,6BACA,wBAAIA,UAAU,uBAAd,cACA,0BAAMC,GAAG,gBACb,yBAAKD,UAAU,cACX,2BAAOE,QAAQ,QAAf,QAA2B,0CAC3B,2BAAOC,SAAUJ,KAAKnB,WAAYwB,IAAI,QAAQC,KAAK,OAAO1B,MAAOoB,KAAKd,MAAMJ,KAAMmB,UAAU,yBAAyBC,GAAG,OAAOK,YAAY,KAG3I,2BAAOJ,QAAQ,sBAAf,iBAAkD,0CAClD,2BAAOG,KAAK,OAAOxB,KAAK,QAAQuB,IAAI,QAAQzB,MAAOoB,KAAKd,MAAMR,MAAO0B,SAAUJ,KAAK1B,kBAAmB2B,UAAU,2BAGjH,2BAAOE,QAAQ,+BAAf,oBAA8D,0CAC9D,8BAAUvB,MAAOoB,KAAKd,MAAMF,QAASqB,IAAI,QAAQJ,UAAU,yBAAyBC,GAAG,8BAA8BM,KAAK,IAAIJ,SAAUJ,KAAKjB,gBAC7I,4BAAQkB,UAAU,8BAClBQ,QAAST,KAAKf,cADd,aAUA,yBAAKgB,UAAU,kBACf,yBAAKA,UAAU,oCACf,yBAAKA,UAAU,OACPV,S,GAnHiBmB,a,MCmCtBC,MAjCf,WAEE,OACE,yBAAKV,UAAU,OAGb,yBAAKA,UAAU,4BACf,yBAAKA,UAAU,aACf,yBAAKA,UAAU,eACb,wBAAIA,UAAU,aAAd,kDACE,uBAAGA,UAAU,aAAb,2CACA,uBAAGA,UAAU,QACb,uBAAGA,UAAU,yBAAyBW,KAAK,2BAA2BC,KAAK,UAA3E,kBAOJ,kBAAC,EAAD,MAGA,yBAAKC,MAAM,qCAEf,uBAAGA,MAAM,eAAeF,KAAK,6DAC3B,+DCvBgBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.25a8e8f3.chunk.js","sourcesContent":["// This would be where your collect your User ID from your .env \n\nconst EmailJSApi ={\n    key: process.env.REACT_APP_USER_ID\n};\n\nexport default EmailJSApi;","import React, {Component} from 'react';\nimport emailjs from 'emailjs-com';\nimport EmailJSApi from '../services/EmailJSApi'\n\nconst template_id = \"<your template_id>\";\nconst userID = EmailJSApi.key;\n\n\nexport default class Contact extends Component{\nconstructor() {\n    super();\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state={\n        name: '',\n        email:'',\n        message:'',\n        submit: false\n    }   \n   \n    this.handleEmailChange=this.handleEmailChange.bind(this);\n   \n}\n    handleEmailChange=(event)=>{\n        event.preventDefault();\n        this.setState({email: event.target.value })\n        // console.log('handleEmailChange' + this.state.email);\n     }\n     nameChange=(event)=>{\n        event.preventDefault();\n        this.setState({name: event.target.value })\n        // console.log('nameChange' + this.state.name);\n     };\n     messageChange=(event)=>{\n        event.preventDefault();\n        this.setState({message: event.target.value })\n        // console.log('messageChange' +this.state.message);\n     }\n    \n     handleSubmit=(event) =>{\n        event.preventDefault();\n       \n        // Testing\n        // console.log('submitted is being seen')\n        // console.log(this.state.name)\n        // console.log(  this.state.email )\n        // console.log( this.state.message)\n\n        const name = this.state.name\n        const email = this.state.email\n        const data = this.state.message\n\n        \n     //this is how I have my template set up with email.js\n     const template_params = {\n        \"email\": email,\n        \"from_name\": name,\n        \"to_name\": \"Alchemical Mind\", \n        \"message_html\": data\n    };\n     \n    emailjs.send('default_service',template_id, template_params\n    , userID\n    )\n        .then((response) => {\n           console.log('SUCCESS!', response.status, response.text);\n        }, (err) => {\n           console.log('FAILED...', err);\n        });\n        this.setState({\n            submit:true\n        })\n       \n        this.reset();\n    }\n    \n    reset(){\n        this.setState({\n            name: '',\n            email:'',\n            message:'', \n        })\n    }\n\n    render(){\n        const submission = this.state.submit;\n        let response;\n        if (submission){\n            response =\n            <div className='response'>\n                <h1>Thank you for Contacting Alchemical Mind!</h1>\n                <p>\n                    Please allow us time to review your request and we will be in contact with you within the next 48hrs!\n                </p>\n            </div>\n        } else{\n            response =\n            <div>\n            <h3 className='mt-2 mb-4 formTitle'>Contact Us</h3>\n            <form id='contact-form'>\n        <div className=\"form-group\" >\n            <label htmlFor=\"Name\">Name <i>(required)</i></label>\n            <input onChange={this.nameChange} ref='input' type=\"text\" value={this.state.name} className=\"form-control mt-2 mb-5\" id=\"Name\" placeholder=\"\"></input>\n            \n\n            <label htmlFor=\"exampleInputEmail1\">Email address <i>(required)</i></label>\n            <input type=\"text\" name='email' ref='input' value={this.state.email} onChange={this.handleEmailChange} className=\"form-control mt-2 mb-5\" ></input>\n            \n            \n            <label htmlFor=\"exampleFormControlTextarea1\">Message/Comments <i>(required)</i></label>\n            <textarea value={this.state.message} ref='input' className=\"form-control mt-2 mb-5\" id=\"exampleFormControlTextarea1\" rows=\"7\" onChange={this.messageChange}></textarea>\n            <button className=\"btn btn-primary btn-lg mb-3\"\n            onClick={this.handleSubmit} \n            >Submit</button>\n            \n        </div>\n        </form >\n        </div>\n        }\n        \n        return(\n            <div className=\"container mb-5\">\n            <div className='row-fluid justify-content-center'>\n            <div className='col'>   \n                   {response}\n                \n            </div>\n            </div>\n            </div>\n        )\n\n  }\n}","import React from 'react';\n\n// Contact Component\nimport Contact from './components/Contact'\n\n//css\nimport './App.css';\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n\n     {/* Jumbotron */}\n      <div className=\"jumbotron backgroundImg \">\n      <div className='row-fluid'>\n      <div className='col textCss'>\n        <h1 className=\"display-3\">Sending Email from the Front-End with Email.js</h1>\n          <p className=\"display-4\">When a quick client side tool is needed</p>\n          <p className=\"lead\">\n          <a className=\"btn btn-primary btn-lg\" href=\"https://www.emailjs.com/\" role=\"button\">Learn more</a>\n          </p>\n      </div>\n      </div>\n      </div>\n    \n      \n      <Contact/>\n          \n           \n      <nav class=\"navbar fixed-bottom navbar-light \">\n        {/* Linked to my linkedin */}\n  <a class=\"navbar-brand\" href=\"https://www.linkedin.com/in/natosha-arringtion-676263165/\">\n    <p >Created by Natosha Arrington</p>\n  </a>\n</nav>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}